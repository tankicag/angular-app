{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DataService {\n  constructor(http) {\n    this.http = http;\n    // Use the following properties if running the Docker containers via Docker Compose\n    // customersUrl = 'http://localhost:3000/api/customers';\n    // ordersUrl = 'http://localhost:3000/api/orders';\n    // Use the following properties if running the app stand-alone with no external dependencies\n    this.customersUrl = 'assets/customers.json';\n    this.ordersUrl = 'assets/orders.json';\n  }\n  getCustomers() {\n    return this.http.get(this.customersUrl).pipe(catchError(this.handleError));\n  }\n  getCustomer(id) {\n    return this.http.get(this.customersUrl).pipe(map(customers => {\n      const customer = customers.filter(cust => cust.id === id);\n      return customer && customer.length ? customer[0] : null;\n    }), catchError(this.handleError));\n  }\n  getOrders(id) {\n    return this.http.get(this.ordersUrl).pipe(map(orders => {\n      const custOrders = orders.filter(order => order.customerId === id);\n      return custOrders;\n    }), catchError(this.handleError));\n  }\n  handleError(error) {\n    console.error('server error:', error);\n    if (error.error instanceof Error) {\n      const errMessage = error.error.message;\n      return throwError(() => new Error(errMessage));\n    }\n    return throwError(() => error || new Error('Server error'));\n  }\n  static #_ = this.ɵfac = function DataService_Factory(t) {\n    return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataService,\n    factory: DataService.ɵfac\n  });\n}","map":{"version":3,"names":["throwError","map","catchError","DataService","constructor","http","customersUrl","ordersUrl","getCustomers","get","pipe","handleError","getCustomer","id","customers","customer","filter","cust","length","getOrders","orders","custOrders","order","customerId","error","console","Error","errMessage","message","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac"],"sources":["/workspaces/angular-app/my-app/src/app/core/data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { Observable, throwError } from 'rxjs';\r\n\r\nimport { map, catchError } from 'rxjs/operators';\r\n\r\nimport { ICustomer, IOrder } from '../../app/shared/interfaces';\r\n\r\n@Injectable() \r\nexport class DataService {\r\n  // Use the following properties if running the Docker containers via Docker Compose\r\n\r\n  // customersUrl = 'http://localhost:3000/api/customers';\r\n\r\n  // ordersUrl = 'http://localhost:3000/api/orders';\r\n\r\n  // Use the following properties if running the app stand-alone with no external dependencies\r\n\r\n  customersUrl = 'assets/customers.json';\r\n\r\n  ordersUrl = 'assets/orders.json';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getCustomers(): Observable<ICustomer[]> {\r\n    return this.http\r\n      .get<ICustomer[]>(this.customersUrl)\r\n\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  getCustomer(id: number): Observable<ICustomer | null> {\r\n    return this.http\r\n      .get<ICustomer[]>(this.customersUrl)\r\n\r\n      .pipe(\r\n        map((customers) => {\r\n          const customer = customers.filter(\r\n            (cust: ICustomer) => cust.id === id\r\n          );\r\n\r\n          return customer && customer.length ? customer[0] : null;\r\n        }),\r\n\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  getOrders(id: number): Observable<IOrder[]> {\r\n    return this.http\r\n      .get<IOrder[]>(this.ordersUrl)\r\n\r\n      .pipe(\r\n        map((orders) => {\r\n          const custOrders = orders.filter(\r\n            (order: IOrder) => order.customerId === id\r\n          );\r\n\r\n          return custOrders;\r\n        }),\r\n\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  private handleError(error: any) {\r\n    console.error('server error:', error);\r\n\r\n    if (error.error instanceof Error) {\r\n      const errMessage = error.error.message;\r\n\r\n      return throwError(() => new Error(errMessage));\r\n    }\r\n\r\n    return throwError(() => error || new Error('Server error'));\r\n  }\r\n}\r\n"],"mappings":"AAIA,SAAqBA,UAAU,QAAQ,MAAM;AAE7C,SAASC,GAAG,EAAEC,UAAU,QAAQ,gBAAgB;;;AAKhD,OAAM,MAAOC,WAAW;EAatBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAZxB;IAEA;IAEA;IAEA;IAEA,KAAAC,YAAY,GAAG,uBAAuB;IAEtC,KAAAC,SAAS,GAAG,oBAAoB;EAEO;EAEvCC,YAAYA,CAAA;IACV,OAAO,IAAI,CAACH,IAAI,CACbI,GAAG,CAAc,IAAI,CAACH,YAAY,CAAC,CAEnCI,IAAI,CAACR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EACvC;EAEAC,WAAWA,CAACC,EAAU;IACpB,OAAO,IAAI,CAACR,IAAI,CACbI,GAAG,CAAc,IAAI,CAACH,YAAY,CAAC,CAEnCI,IAAI,CACHT,GAAG,CAAEa,SAAS,IAAI;MAChB,MAAMC,QAAQ,GAAGD,SAAS,CAACE,MAAM,CAC9BC,IAAe,IAAKA,IAAI,CAACJ,EAAE,KAAKA,EAAE,CACpC;MAED,OAAOE,QAAQ,IAAIA,QAAQ,CAACG,MAAM,GAAGH,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI;IACzD,CAAC,CAAC,EAEFb,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAC7B;EACL;EAEAQ,SAASA,CAACN,EAAU;IAClB,OAAO,IAAI,CAACR,IAAI,CACbI,GAAG,CAAW,IAAI,CAACF,SAAS,CAAC,CAE7BG,IAAI,CACHT,GAAG,CAAEmB,MAAM,IAAI;MACb,MAAMC,UAAU,GAAGD,MAAM,CAACJ,MAAM,CAC7BM,KAAa,IAAKA,KAAK,CAACC,UAAU,KAAKV,EAAE,CAC3C;MAED,OAAOQ,UAAU;IACnB,CAAC,CAAC,EAEFnB,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAC7B;EACL;EAEQA,WAAWA,CAACa,KAAU;IAC5BC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IAErC,IAAIA,KAAK,CAACA,KAAK,YAAYE,KAAK,EAAE;MAChC,MAAMC,UAAU,GAAGH,KAAK,CAACA,KAAK,CAACI,OAAO;MAEtC,OAAO5B,UAAU,CAAC,MAAM,IAAI0B,KAAK,CAACC,UAAU,CAAC,CAAC;;IAGhD,OAAO3B,UAAU,CAAC,MAAMwB,KAAK,IAAI,IAAIE,KAAK,CAAC,cAAc,CAAC,CAAC;EAC7D;EAAC,QAAAG,CAAA,G;qBAlEU1B,WAAW,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAX/B,WAAW;IAAAgC,OAAA,EAAXhC,WAAW,CAAAiC;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}